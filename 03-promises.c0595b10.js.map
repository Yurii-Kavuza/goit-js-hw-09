{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,WAAYF,SAASC,cAAc,kBACnCE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,mBAC/BI,IAAKL,SAASC,cAAc,WAqC9B,SAASK,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAUtC,OATgB,IAAIC,SAAQ,CAACC,EAASC,KACpCC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA3CbV,EAAKO,IAAIW,iBAAiB,SAE1B,SAAkBC,GAChBA,EAAEC,iBACF,MAAMhB,EAAaJ,EAAKI,WAAWiB,MAE7Bf,GADON,EAAKK,KAAKgB,MACRrB,EAAKM,OAAOe,OAC3B,IAAIC,EAAQ,EAEZ,IAAK,IAAIC,EAAI,EAAGA,GAAKjB,EAAQiB,IAAK,CAChC,MAAMC,EAAWD,EAEZA,EAAI,EACPD,GAASlB,EAKXI,EAAcgB,EAAUF,GACrBG,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBgB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqBnB,QAAiBC,MAAU,IAGnDmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,MAClBgB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoBrB,QAAeC,MAAU,IAInDqB,QAAQC,IAAIV,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('form'),\n  firstDelay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  btn: document.querySelector('button'),\n};\n\nrefs.btn.addEventListener('click', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const firstDelay = refs.firstDelay.value;\n  const step = refs.step.value;\n  const amount = refs.amount.value;\n  let delay = 0;\n\n  for (let i = 1; i <= amount; i++) {\n    const position = i;\n\n    if ((i = 1)) {\n      delay += firstDelay;\n    } else {\n      delay += step;\n    }\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    console.log(delay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Fulfill\n      } else {\n        reject({ position, delay }); // Reject\n      }\n    }, delay);\n  });\n  return promise;\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","firstDelay","step","amount","btn","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","value","delay1","i","position1","then","$parcel$interopDefault","Notify","success","catch","failure","console","log"],"version":3,"file":"03-promises.c0595b10.js.map"}